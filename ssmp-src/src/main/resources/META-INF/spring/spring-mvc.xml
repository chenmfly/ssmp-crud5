<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
         http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://cxf.apache.org/jaxws  
	  http://cxf.apache.org/schemas/jaxws.xsd
	  http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	  http://www.springframework.org/schema/aop
	  http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	  http://www.springframework.org/schema/task
	  http://www.springframework.org/schema/task/spring-task.xsd">
	
<!-- 	<context:component-scan base-package="com.ssmp"> -->
<!-- 		和SpringMvc配置不同，除了控制器不扫，其它都扫描 -->
<!-- 		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
<!-- 	</context:component-scan> -->
	
	<!-- Spring配置文件、这里配置和业务逻辑有关的 -->
	<!-- ===========================数据源、事务控制，xx================================ -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	
	<bean id="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${pool.driverClass}"></property>
		<property name="url" value="${pool.jdbcUrl}"></property>
		<property name="username" value="${pool.user}"></property>
		<property name="password" value="${pool.password}"></property>
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="0"></property>  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="0" />  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="20"></property>  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
        <!-- 验证数据库连接的查询语句,这个查询语句必须是至少返回一条数据的SELECT语句 -->
        <property name="validationQuery">  
            <value>SELECT 1</value>  
        </property>  
        <!-- 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
        <property name="testWhileIdle" value="true" />  
        <!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
        <property name="testOnBorrow" value="false" />  
        <!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
        <property name="testOnReturn" value="false" />  
   		<!--  是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭，并且指定每个连接上PSCache的大小  -->
   		<property name="poolPreparedStatements" value="false"></property>
   		<property name="maxPoolPreparedStatementPerConnectionSize" value="20"></property>
        <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="1800" />  
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />  
        <!-- 监控数据库,配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 -->  
        <property name="filters" value="stat,wall,slf4j" />  
		<!-- # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
		connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000 -->
	</bean>
	
	<!-- ==========================配置和MyBatisPlus的配合=========================== -->
	<bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean">
		<property name="dataSource" ref="pooledDataSource"/>
		<!-- 配置实体扫描路径，多个package可以用分号;逗号,分隔，支持通配符* -->
		<!-- com.a.b.entity;com.a.c.entity;com.d.*.entity-->
		<!-- <property name="typeAliasesPackage" value="com.atguigu.crud.bean"/> --><!-- 暂时取消 -->
		<!-- XML配置 -->
		<property name="mapperLocations" value="classpath:mapping/**Mapper.xml" />
		<!-- MP全局配置 -->
		<property name="configuration" ref="mybatisConfig"/>
		<!-- MP全局策略 -->
		<property name="globalConfig" ref="globalConfig"/>
		<property name="plugins">
			<array>
				<!-- 分页插件配置 -->
				<bean id="paginationInterceptor" class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">
					<!-- <property name="sqlParser" ref="自定义解析类、可以没有" /> -->
			        <property name="localPage" value="true" /><!-- 默认 false 改为 true 开启了 pageHeper 支持、可以没有 -->
			        <!-- <property name="dialectClazz" value="自定义方言类、可以没有" /> -->
				</bean>
				<!-- 乐观锁插件 -->
				<bean id="optimisticLockerInterceptor" class="com.baomidou.mybatisplus.plugins.OptimisticLockerInterceptor"></bean>
				<!-- 性能拦截器，兼打印sql，不生产环境配置 -->
				<!--<bean id="performanceInterceptor" class="com.baomidou.mybatisplus.plugins.PerformanceInterceptor">
					&lt;!&ndash; SQL 执行最大时长，超过自动停止运行，有助于发现问题。 &ndash;&gt;
					<property name="maxTime" value="100"></property>
					&lt;!&ndash; SQL 是否格式化 &ndash;&gt;
					<property name="format" value="false"></property>
				</bean>-->
			</array>
		</property>
	</bean>
	
	<bean id="mybatisConfig" class="com.baomidou.mybatisplus.MybatisConfiguration">
		<!-- 驼峰命名规则 -->
		<property name="mapUnderscoreToCamelCase" value="true"/>
		<!-- 部分数据库不识别默认的NULL类型（比如oracle，需要配置该属性） -->
		<!-- <property name="jdbcTypeForNull">
			<util:constant static-field="org.apache.ibatis.type.JdbcType.NULL"/>
		</property> -->
	</bean>
	
	<bean id="globalConfig" class="com.baomidou.mybatisplus.entity.GlobalConfiguration">
		<!-- 逻辑删除，定义下面3个参数 -->
		<property name="sqlInjector" ref="logicSqlInjector"/>
		<property name="logicDeleteValue" value="-1"/>
		<property name="logicNotDeleteValue" value="1"/>
		<!-- 全局ID类型： AUTO->`0`("数据库ID自增") INPUT->`1`(用户输入ID") ID_WORKER->`2`("全局唯一ID") UUID->`3`("全局唯一ID") -->
		<property name="idType" value="2"/>
		<!-- 主键Sequence -->
		<!-- <property name="keyGenerator" ref="keyGenerator"/> -->
		<!-- 公共字段填充处理器 -->
		<!-- <property name="metaObjectHandler" ref="myMetaObjectHandler"/> -->
	</bean>
	
	<!-- 配置oracle主键Sequence，其他类型数据库，请配置相应的类型 -->
	<!-- <bean id="keyGenerator" class="com.baomidou.mybatisplus.incrementer.OracleKeyGenerator"></bean> -->
	
	<!-- 自定义处理器 -->
	<!-- <bean id="myMetaObjectHandler" class="com.baomidou.test.MyMetaObjectHandler" /> -->
	
	<!-- 逻辑删除Sql注入器 -->
	<bean id="logicSqlInjector" class="com.baomidou.mybatisplus.mapper.LogicSqlInjector"></bean>
	
	<!-- 配置mybatis扫描mapper接口的路径，相当于注解@MapperScan，@MapperScan("com.baomidou.mybatisplus.test.h2.entity.mapper")-->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssmp.dao"></property>
	</bean>
	
	<!-- ==========================事务控制配置=========================== -->
	<!-- 配置事务管理器 -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	<!-- 事务管理属性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置切面 -->
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.ssmp.serviceImpl..*.*(..))"/>
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
	</aop:config>
</beans>